@RunWith(SpringRunner.class)
public class TaskServiceTest {

    @TestConfiguration
    static class TaskServiceTestContextConfiguration {

        @Bean
        public TaskService taskServiceService() {
            return new TaskService();
        }
    }

    @Autowired
    private TaskService taskService;

    @MockBean
    private TaskRepository taskRepository;

    private List<Task> taskList = new ArrayList<>();

    @Before
    public void setUp(){
        Task task = TaskMockTestUtils.mockTask();
        taskList.add(task);
    }

    @Test
    public void testeListarTask(){

        Mockito.when(taskRepository.findAll())
                .thenReturn(taskList);

        List<Task> lista = new ArrayList<>();
        lista.add(taskService.listarTasks().get(0));

        Assert.assertEquals("Sub-Test", lista.get(0).getIssueType());
    }

    @Test
    public void testeObterTask(){

        Mockito.when(taskRepository.findById(UUID.fromString("27414992-14b7-4182-a199-3fed4b205586")))
                .thenReturn(Optional.of(taskList.get(0)));

        Task taskNova = taskService.obterTask(UUID.fromString("27414992-14b7-4182-a199-3fed4b205586")).get();

        Assert.assertEquals("Sub-Test", taskNova.getIssueType());
    }

    @Test
    public void testeCriarTask(){

        Mockito.when(taskRepository.save(taskList.get(0)))
                .thenReturn(taskList.get(0));

        Task taskNova = taskService.criarTask(taskList.get(0));

        Assert.assertEquals("Sub-Test", taskNova.getIssueType());
    }

    @Test
    public void testeAtualizarTask(){

        Mockito.when(taskRepository.save(taskList.get(0)))
                .thenReturn(taskList.get(0));

        Mockito.when(taskRepository.findById(UUID.fromString("27414992-14b7-4182-a199-3fed4b205586")))
                .thenReturn(Optional.of(taskList.get(0)));

        Task taskAtualizada = taskService.atualizarTask(UUID.fromString("27414992-14b7-4182-a199-3fed4b205586"),taskList.get(0)).get();

        Assert.assertEquals("Sub-Test", taskAtualizada.getIssueType());
    }
}


public class TaskMockTestUtils {

    public static Task mockTask(){
        Task task = new Task();
        task.setId(UUID.fromString("27414992-14b7-4182-a199-3fed4b205586"));
        task.setIssueId(1);
        task.setTeam("Contratação");
        task.setIssueType("Sub-Test");
        task.setSummary("Testar funcionalidade Y");
        task.setLabels("teste_unit");
        task.setPriority("ALTA");
        task.setJiraKey("CSA-1234");
        task.setHours(5);
        task.setEpicLink("");
        task.setFixVersions("");
        task.setDescription("Teste unitarios das camadas X Y Z B A D");
        task.setDueDate("");
        task.setComplexityPoints("8");
        task.setComponents("");
        task.setOriginalEstimate(task.getHours() * 3600);
        return task;
    }
}
